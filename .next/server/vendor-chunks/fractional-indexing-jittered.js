"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fractional-indexing-jittered";
exports.ids = ["vendor-chunks/fractional-indexing-jittered"];
exports.modules = {

/***/ "(ssr)/./node_modules/fractional-indexing-jittered/lib/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/fractional-indexing-jittered/lib/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexGenerator: () => (/* binding */ IndexGenerator),\n/* harmony export */   base62CharSet: () => (/* binding */ base62CharSet),\n/* harmony export */   generateJitteredKeyBetween: () => (/* binding */ generateJitteredKeyBetween),\n/* harmony export */   generateKeyBetween: () => (/* binding */ generateKeyBetween),\n/* harmony export */   generateNJitteredKeysBetween: () => (/* binding */ generateNJitteredKeysBetween),\n/* harmony export */   generateNKeysBetween: () => (/* binding */ generateNKeysBetween),\n/* harmony export */   indexCharacterSet: () => (/* binding */ indexCharacterSet)\n/* harmony export */ });\n// src/charSet.ts\nfunction indexCharacterSet(options) {\n  const dicts = createCharSetDicts(options.chars);\n  const limits = integerLimits(\n    dicts,\n    options.firstPositive,\n    options.mostPositive,\n    options.mostNegative\n  );\n  const jitterRange = options.jitterRange ?? Math.floor(Math.pow(dicts.length, 3) / 5);\n  const paddingRange = paddingDict(jitterRange, dicts.length);\n  return {\n    chars: options.chars,\n    byChar: dicts.byChar,\n    byCode: dicts.byCode,\n    length: dicts.length,\n    first: dicts.byCode[0],\n    last: dicts.byCode[dicts.length - 1],\n    firstPositive: limits.firstPositive,\n    mostPositive: limits.mostPositive,\n    firstNegative: limits.firstNegative,\n    mostNegative: limits.mostNegative,\n    jitterRange,\n    paddingDict: paddingRange\n  };\n}\nfunction createCharSetDicts(charSet) {\n  const byCode = {};\n  const byChar = {};\n  const length = charSet.length;\n  for (let i = 0; i < length; i++) {\n    const char = charSet[i];\n    byCode[i] = char;\n    byChar[char] = i;\n  }\n  return {\n    byCode,\n    byChar,\n    length\n  };\n}\nfunction integerLimits(dicts, firstPositive, mostPositive, mostNegative) {\n  const firstPositiveIndex = firstPositive ? dicts.byChar[firstPositive] : Math.ceil(dicts.length / 2);\n  const mostPositiveIndex = mostPositive ? dicts.byChar[mostPositive] : dicts.length - 1;\n  const mostNegativeIndex = mostNegative ? dicts.byChar[mostNegative] : 0;\n  if (firstPositiveIndex === void 0 || mostPositiveIndex === void 0 || mostNegativeIndex === void 0) {\n    throw new Error(\"invalid charSet\");\n  }\n  if (mostPositiveIndex - firstPositiveIndex < 3) {\n    throw new Error(\n      \"mostPositive must be at least 3 characters away from neutral\"\n    );\n  }\n  if (firstPositiveIndex - mostNegativeIndex < 3) {\n    throw new Error(\n      \"mostNegative must be at least 3 characters away from neutral\"\n    );\n  }\n  return {\n    firstPositive: dicts.byCode[firstPositiveIndex],\n    mostPositive: dicts.byCode[mostPositiveIndex],\n    firstNegative: dicts.byCode[firstPositiveIndex - 1],\n    mostNegative: dicts.byCode[mostNegativeIndex]\n  };\n}\nfunction paddingDict(jitterRange, charSetLength) {\n  const paddingDict2 = {};\n  let distance = 0;\n  for (let i = 0; i < 100; i++) {\n    paddingDict2[i] = Math.pow(charSetLength, i);\n    if (paddingDict2[i] > jitterRange) {\n      break;\n    }\n  }\n  return paddingDict2;\n}\nvar _base62CharSet = null;\nfunction base62CharSet() {\n  if (_base62CharSet)\n    return _base62CharSet;\n  return _base62CharSet = indexCharacterSet({\n    // Base62 are all the alphanumeric characters, database and user friendly\n    // For shorter strings and more room you could opt for more characters\n    chars: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n    // This gives us nice human readable keys to start with a0 a1 etc\n    firstPositive: \"a\",\n    mostPositive: \"z\",\n    mostNegative: \"A\"\n  });\n}\n\n// src/integerLength.ts\nfunction distanceBetween(a, b, charSet) {\n  const indexA = charSet.byChar[a];\n  const indexB = charSet.byChar[b];\n  return Math.abs(indexA - indexB);\n}\nfunction integerLength(head, charSet) {\n  const firstChar = head[0];\n  if (firstChar > charSet.mostPositive || firstChar < charSet.mostNegative) {\n    throw new Error(\"invalid firstChar on key\");\n  }\n  if (firstChar === charSet.mostPositive) {\n    const firstLevel = distanceBetween(firstChar, charSet.firstPositive, charSet) + 1;\n    return firstLevel + integerLengthFromSecondLevel(head.slice(1), \"positive\", charSet);\n  }\n  if (firstChar === charSet.mostNegative) {\n    const firstLevel = distanceBetween(firstChar, charSet.firstNegative, charSet) + 1;\n    return firstLevel + integerLengthFromSecondLevel(head.slice(1), \"negative\", charSet);\n  }\n  const isPositiveRange = firstChar >= charSet.firstPositive;\n  if (isPositiveRange) {\n    return distanceBetween(firstChar, charSet.firstPositive, charSet) + 2;\n  } else {\n    return distanceBetween(firstChar, charSet.firstNegative, charSet) + 2;\n  }\n}\nfunction integerLengthFromSecondLevel(key, direction, charSet) {\n  const firstChar = key[0];\n  if (firstChar > charSet.mostPositive || firstChar < charSet.mostNegative) {\n    throw new Error(\"invalid firstChar on key\");\n  }\n  if (firstChar === charSet.mostPositive && direction === \"positive\") {\n    const totalPositiveRoom = distanceBetween(firstChar, charSet.mostNegative, charSet) + 1;\n    return totalPositiveRoom + integerLengthFromSecondLevel(key.slice(1), direction, charSet);\n  }\n  if (firstChar === charSet.mostNegative && direction === \"negative\") {\n    const totalNegativeRoom = distanceBetween(firstChar, charSet.mostPositive, charSet) + 1;\n    return totalNegativeRoom + integerLengthFromSecondLevel(key.slice(1), direction, charSet);\n  }\n  if (direction === \"positive\") {\n    return distanceBetween(firstChar, charSet.mostNegative, charSet) + 2;\n  } else {\n    return distanceBetween(firstChar, charSet.mostPositive, charSet) + 2;\n  }\n}\n\n// src/padToSameLength.ts\nfunction makeSameLength(a, b, pad, fillChar, forceLength) {\n  const max = forceLength ?? Math.max(a.length, b.length);\n  if (pad === \"start\") {\n    return [a.padStart(max, fillChar), b.padStart(max, fillChar)];\n  }\n  return [a.padEnd(max, fillChar), b.padEnd(max, fillChar)];\n}\n\n// src/keyAsNumber.ts\nfunction midPoint(lower, upper, charSet) {\n  let [paddedLower, paddedUpper] = makeSameLength(\n    lower,\n    upper,\n    \"end\",\n    charSet.first\n  );\n  let distance = lexicalDistance(paddedLower, paddedUpper, charSet);\n  if (distance === 1) {\n    paddedLower = paddedLower.padEnd(paddedLower.length + 1, charSet.first);\n    distance = charSet.length;\n  }\n  const mid = encodeToCharSet(Math.floor(distance / 2), charSet);\n  return addCharSetKeys(paddedLower, mid, charSet);\n}\nfunction lexicalDistance(a, b, charSet) {\n  const [lower, upper] = makeSameLength(a, b, \"end\", charSet.first).sort();\n  const distance = subtractCharSetKeys(upper, lower, charSet);\n  return decodeCharSetToNumber(distance, charSet);\n}\nfunction addCharSetKeys(a, b, charSet) {\n  const base = charSet.length;\n  const [paddedA, paddedB] = makeSameLength(a, b, \"start\", charSet.first);\n  const result = [];\n  let carry = 0;\n  for (let i = paddedA.length - 1; i >= 0; i--) {\n    const digitA = charSet.byChar[paddedA[i]];\n    const digitB = charSet.byChar[paddedB[i]];\n    const sum = digitA + digitB + carry;\n    carry = Math.floor(sum / base);\n    const remainder = sum % base;\n    result.unshift(charSet.byCode[remainder]);\n  }\n  if (carry > 0) {\n    result.unshift(charSet.byCode[carry]);\n  }\n  return result.join(\"\");\n}\nfunction subtractCharSetKeys(a, b, charSet) {\n  const base = charSet.length;\n  const [paddedA, paddedB] = makeSameLength(a, b, \"start\", charSet.first);\n  const result = [];\n  let borrow = 0;\n  for (let i = paddedA.length - 1; i >= 0; i--) {\n    let digitA = charSet.byChar[paddedA[i]];\n    const digitB = charSet.byChar[paddedB[i]] + borrow;\n    if (digitA < digitB) {\n      borrow = 1;\n      digitA += base;\n    } else {\n      borrow = 0;\n    }\n    const difference = digitA - digitB;\n    result.unshift(charSet.byCode[difference]);\n  }\n  if (borrow > 0) {\n    throw new Error(\n      \"Subtraction result is negative. Ensure a is greater than or equal to b.\"\n    );\n  }\n  while (result.length > 1 && result[0] === charSet.byCode[0]) {\n    result.shift();\n  }\n  return result.join(\"\");\n}\nfunction incrementKey(key, charSet) {\n  return addCharSetKeys(key, charSet.byCode[1], charSet);\n}\nfunction decrementKey(key, charSet) {\n  return subtractCharSetKeys(key, charSet.byCode[1], charSet);\n}\nfunction encodeToCharSet(int, charSet) {\n  if (int === 0) {\n    return charSet.byCode[0];\n  }\n  let res = \"\";\n  const max = charSet.length;\n  while (int > 0) {\n    res = charSet.byCode[int % max] + res;\n    int = Math.floor(int / max);\n  }\n  return res;\n}\nfunction decodeCharSetToNumber(key, charSet) {\n  let res = 0;\n  const length = key.length;\n  const max = charSet.length;\n  for (let i = 0; i < length; i++) {\n    res += charSet.byChar[key[i]] * Math.pow(max, length - i - 1);\n  }\n  return res;\n}\n\n// src/integer.ts\nfunction startKey(charSet) {\n  return charSet.firstPositive + charSet.byCode[0];\n}\nfunction validInteger(integer, charSet) {\n  const length = integerLength(integer, charSet);\n  return length === integer.length;\n}\nfunction validateOrderKey(orderKey, charSet) {\n  getIntegerPart(orderKey, charSet);\n}\nfunction getIntegerPart(orderKey, charSet) {\n  const head = integerHead(orderKey, charSet);\n  const integerPartLength = integerLength(head, charSet);\n  if (integerPartLength > orderKey.length) {\n    throw new Error(\"invalid order key length: \" + orderKey);\n  }\n  return orderKey.slice(0, integerPartLength);\n}\nfunction validateInteger(integer, charSet) {\n  if (!validInteger(integer, charSet)) {\n    throw new Error(\"invalid integer length: \" + integer);\n  }\n}\nfunction incrementInteger(integer, charSet) {\n  validateInteger(integer, charSet);\n  const [head, digs] = splitInteger(integer, charSet);\n  const anyNonMaxedDigit = digs.split(\"\").some((d) => d !== charSet.byCode[charSet.length - 1]);\n  if (anyNonMaxedDigit) {\n    const newDigits = incrementKey(digs, charSet);\n    return head + newDigits;\n  }\n  const nextHead = incrementIntegerHead(head, charSet);\n  return startOnNewHead(nextHead, \"lower\", charSet);\n}\nfunction decrementInteger(integer, charSet) {\n  validateInteger(integer, charSet);\n  const [head, digs] = splitInteger(integer, charSet);\n  const anyNonLimitDigit = digs.split(\"\").some((d) => d !== charSet.byCode[0]);\n  if (anyNonLimitDigit) {\n    const newDigits = decrementKey(digs, charSet);\n    return head + newDigits;\n  }\n  const nextHead = decrementIntegerHead(head, charSet);\n  return startOnNewHead(nextHead, \"upper\", charSet);\n}\nfunction integerHead(integer, charSet) {\n  let i = 0;\n  if (integer[0] === charSet.mostPositive) {\n    while (integer[i] === charSet.mostPositive) {\n      i = i + 1;\n    }\n  }\n  if (integer[0] === charSet.mostNegative) {\n    while (integer[i] === charSet.mostNegative) {\n      i = i + 1;\n    }\n  }\n  return integer.slice(0, i + 1);\n}\nfunction splitInteger(integer, charSet) {\n  const head = integerHead(integer, charSet);\n  const tail = integer.slice(head.length);\n  return [head, tail];\n}\nfunction incrementIntegerHead(head, charSet) {\n  const inPositiveRange = head >= charSet.firstPositive;\n  const nextHead = incrementKey(head, charSet);\n  const headIsLimitMax = head[head.length - 1] === charSet.mostPositive;\n  const nextHeadIsLimitMax = nextHead[nextHead.length - 1] === charSet.mostPositive;\n  if (inPositiveRange && nextHeadIsLimitMax) {\n    return nextHead + charSet.mostNegative;\n  }\n  if (!inPositiveRange && headIsLimitMax) {\n    return head.slice(0, head.length - 1);\n  }\n  return nextHead;\n}\nfunction decrementIntegerHead(head, charSet) {\n  const inPositiveRange = head >= charSet.firstPositive;\n  const headIsLimitMin = head[head.length - 1] === charSet.mostNegative;\n  if (inPositiveRange && headIsLimitMin) {\n    const nextLevel = head.slice(0, head.length - 1);\n    return decrementKey(nextLevel, charSet);\n  }\n  if (!inPositiveRange && headIsLimitMin) {\n    return head + charSet.mostPositive;\n  }\n  return decrementKey(head, charSet);\n}\nfunction startOnNewHead(head, limit, charSet) {\n  const newLength = integerLength(head, charSet);\n  const fillChar = limit === \"upper\" ? charSet.byCode[charSet.length - 1] : charSet.byCode[0];\n  return head + fillChar.repeat(newLength - head.length);\n}\n\n// src/jittering.ts\nfunction jitterString(orderKey, charSet) {\n  const shift = encodeToCharSet(\n    Math.floor(Math.random() * charSet.jitterRange),\n    charSet\n  );\n  return addCharSetKeys(orderKey, shift, charSet);\n}\nfunction padAndJitterString(orderKey, numberOfChars, charSet) {\n  const paddedKey = orderKey.padEnd(\n    orderKey.length + numberOfChars,\n    charSet.first\n  );\n  return jitterString(paddedKey, charSet);\n}\nfunction paddingNeededForJitter(orderKey, b, charSet) {\n  const integer = getIntegerPart(orderKey, charSet);\n  const nextInteger = incrementInteger(integer, charSet);\n  let needed = 0;\n  if (b !== null) {\n    const distanceToB = lexicalDistance(orderKey, b, charSet);\n    if (distanceToB < charSet.jitterRange + 1) {\n      needed = Math.max(needed, paddingNeededForDistance(distanceToB, charSet));\n    }\n  }\n  const distanceToNextInteger = lexicalDistance(orderKey, nextInteger, charSet);\n  if (distanceToNextInteger < charSet.jitterRange + 1) {\n    needed = Math.max(\n      needed,\n      paddingNeededForDistance(distanceToNextInteger, charSet)\n    );\n  }\n  return needed;\n}\nfunction paddingNeededForDistance(distance, charSet) {\n  const gap = charSet.jitterRange - distance;\n  const firstBigger = Object.entries(charSet.paddingDict).find(\n    ([_key, value]) => {\n      return value > gap;\n    }\n  );\n  return firstBigger ? parseInt(firstBigger[0]) : 0;\n}\n\n// src/generateKeyBetween.ts\nfunction generateKeyBetween(lower, upper, charSet = base62CharSet()) {\n  if (lower !== null) {\n    validateOrderKey(lower, charSet);\n  }\n  if (upper !== null) {\n    validateOrderKey(upper, charSet);\n  }\n  if (lower === null && upper === null) {\n    return startKey(charSet);\n  }\n  if (lower === null) {\n    const integer = getIntegerPart(upper, charSet);\n    return decrementInteger(integer, charSet);\n  }\n  if (upper === null) {\n    const integer = getIntegerPart(lower, charSet);\n    return incrementInteger(integer, charSet);\n  }\n  if (lower >= upper) {\n    throw new Error(lower + \" >= \" + upper);\n  }\n  return midPoint(lower, upper, charSet);\n}\nfunction generateNKeysBetween(a, b, n, charSet = base62CharSet()) {\n  return spreadGeneratorResults(\n    a,\n    b,\n    n,\n    charSet,\n    generateKeyBetween,\n    generateNKeysBetween\n  );\n}\nfunction generateJitteredKeyBetween(lower, upper, charSet = base62CharSet()) {\n  const key = generateKeyBetween(lower, upper, charSet);\n  const paddingNeeded = paddingNeededForJitter(key, upper, charSet);\n  if (paddingNeeded) {\n    return padAndJitterString(key, paddingNeeded, charSet);\n  }\n  return jitterString(key, charSet);\n}\nfunction generateNJitteredKeysBetween(lower, upper, n, charSet = base62CharSet()) {\n  return spreadGeneratorResults(\n    lower,\n    upper,\n    n,\n    charSet,\n    generateJitteredKeyBetween,\n    generateNJitteredKeysBetween\n  );\n}\nfunction spreadGeneratorResults(lower, upper, n, charSet, generateKey, generateNKeys) {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [generateKey(lower, upper, charSet)];\n  }\n  if (upper == null) {\n    let newUpper = generateKey(lower, upper, charSet);\n    const result = [newUpper];\n    for (let i = 0; i < n - 1; i++) {\n      newUpper = generateKey(newUpper, upper, charSet);\n      result.push(newUpper);\n    }\n    return result;\n  }\n  if (lower == null) {\n    let newLower = generateKey(lower, upper, charSet);\n    const result = [newLower];\n    for (let i = 0; i < n - 1; i++) {\n      newLower = generateKey(lower, newLower, charSet);\n      result.push(newLower);\n    }\n    result.reverse();\n    return result;\n  }\n  const mid = Math.floor(n / 2);\n  const midOrderKey = generateKey(lower, upper, charSet);\n  return [\n    ...generateNKeys(lower, midOrderKey, mid, charSet),\n    midOrderKey,\n    ...generateNKeys(midOrderKey, upper, n - mid - 1, charSet)\n  ];\n}\n\n// src/IndexGenerator.ts\nvar IndexGenerator = class {\n  charSet;\n  useJitter;\n  list;\n  useGroups;\n  groupIdLength;\n  constructor(list, options = {}) {\n    this.charSet = options.charSet ?? base62CharSet();\n    this.useJitter = options.useJitter ?? true;\n    this.list = list;\n    this.useGroups = !!options.groupIdLength && options.groupIdLength > 0;\n    this.groupIdLength = options.groupIdLength ?? 0;\n  }\n  /**\n   * Updates the list that the generator uses to generate keys.\n   * The generator will not mutate the internal list when generating keys.\n   */\n  updateList(list) {\n    this.list = [...list].sort();\n  }\n  /**\n   * Generate any number of keys at the start of the list (before the first key).\n   * Optionally you can supply a groupId to generate keys at the start of a specific group.\n   */\n  nKeysStart(n, groupId) {\n    this.validateGroupId(groupId);\n    return this.generateNKeysBetween(\n      null,\n      this.firstOfGroup(groupId),\n      n,\n      groupId\n    );\n  }\n  /**\n   * Generate a single key at the start of the list (before the first key).\n   * Optionally you can supply a groupId to generate a key at the start of a specific group.\n   */\n  keyStart(groupId) {\n    this.validateGroupId(groupId);\n    return this.nKeysStart(1, groupId)[0];\n  }\n  /**\n   * Generate any number of keys at the end of the list (after the last key).\n   * Optionally you can supply a groupId to generate keys at the end of a specific group.\n   */\n  nKeysEnd(n, groupId) {\n    this.validateGroupId(groupId);\n    return this.generateNKeysBetween(\n      this.lastOfGroup(groupId),\n      null,\n      n,\n      groupId\n    );\n  }\n  /**\n   * Generate a single key at the end of the list (after the last key).\n   * Optionally you can supply a groupId to generate a key at the end of a specific group.\n   */\n  keyEnd(groupId) {\n    this.validateGroupId(groupId);\n    return this.nKeysEnd(1, groupId)[0];\n  }\n  /**\n   * Generate any number of keys behind a specific key and in front of the next key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  nKeysAfter(orderKey, n) {\n    const keyAfter = this.getKeyAfter(orderKey);\n    return this.generateNKeysBetween(\n      orderKey,\n      keyAfter,\n      n,\n      this.groupId(orderKey)\n    );\n  }\n  /**\n   * Generate a single key behind a specific key and in front of the next key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  keyAfter(orderKey) {\n    return this.nKeysAfter(orderKey, 1)[0];\n  }\n  /**\n   * Generate any number of keys in front of a specific key and behind the previous key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  nKeysBefore(orderKey, n) {\n    const keyBefore = this.getKeyBefore(orderKey);\n    return this.generateNKeysBetween(\n      keyBefore,\n      orderKey,\n      n,\n      this.groupId(orderKey)\n    );\n  }\n  /**\n   * Generate a single key in front of a specific key and behind the previous key.\n   * GroupId will be inferred from the orderKey if working with groups\n   */\n  keyBefore(orderKey) {\n    return this.nKeysBefore(orderKey, 1)[0];\n  }\n  /**\n   * private function responsible for calling the correct generate function\n   */\n  generateNKeysBetween(lowerKey, upperKey, n, groupId) {\n    const lower = this.groupLessKey(lowerKey);\n    const upper = this.groupLessKey(upperKey);\n    const keys = this.useJitter ? generateNJitteredKeysBetween(lower, upper, n, this.charSet) : generateNKeysBetween(lower, upper, n, this.charSet);\n    return !groupId ? keys : keys.map((key) => groupId + key);\n  }\n  /**\n   * get the key before the supplied orderKey, if it exists and is in the same group\n   */\n  getKeyBefore(orderKey) {\n    const index = this.list.indexOf(orderKey);\n    if (index === -1) {\n      throw new Error(`orderKey is not in the list`);\n    }\n    const before = this.list[index - 1];\n    return !!before && this.isSameGroup(orderKey, before) ? before : null;\n  }\n  /**\n   * get the key after the supplied orderKey, if it exists and is in the same group\n   */\n  getKeyAfter(orderKey) {\n    const index = this.list.indexOf(orderKey);\n    if (index === -1) {\n      throw new Error(`orderKey is not in the list`);\n    }\n    const after = this.list[index + 1];\n    return !!after && this.isSameGroup(orderKey, after) ? after : null;\n  }\n  /**\n   * get the first key of the group (or the first key of the list if not using groups)\n   */\n  firstOfGroup(groupId) {\n    if (!this.useGroups)\n      return this.list[0] ?? null;\n    const first = this.list.find((key) => this.isPartOfGroup(key, groupId));\n    return first ?? null;\n  }\n  /**\n   * get the last key of the group (or the last key of the list if not using groups)\n   */\n  lastOfGroup(groupId) {\n    if (!this.useGroups)\n      return this.list[this.list.length - 1] ?? null;\n    const allGroupItems = this.list.filter(\n      (key) => this.isPartOfGroup(key, groupId)\n    );\n    const last = allGroupItems[allGroupItems.length - 1];\n    return last ?? null;\n  }\n  /**\n   * throw an error if the groupId is invalid or supplied when not using groups\n   */\n  validateGroupId(groupId) {\n    if (!this.useGroups) {\n      if (groupId) {\n        console.warn(\"groupId should not used when not using groups\");\n      }\n      return;\n    }\n    if (!groupId) {\n      throw new Error(\"groupId is required when using groups\");\n    }\n    if (groupId.length !== this.groupIdLength) {\n      throw new Error(`groupId must be the lenght supplied in the options`);\n    }\n  }\n  /**\n   * get the groupId from the orderKey\n   */\n  groupId(orderKey) {\n    if (!this.useGroups)\n      return void 0;\n    return this.splitIntoGroupIdAndOrderKey(orderKey)[0];\n  }\n  /**\n   * remove the groupId from the orderKey\n   */\n  groupLessKey(orderKey) {\n    if (!this.useGroups)\n      return orderKey;\n    return this.splitIntoGroupIdAndOrderKey(orderKey)[1];\n  }\n  /**\n   * split the orderKey into groupId and key\n   * if not using groups, orderKey will be the same as key\n   */\n  splitIntoGroupIdAndOrderKey(orderKey) {\n    if (!this.useGroups || !orderKey) {\n      return [void 0, orderKey];\n    }\n    const groupId = orderKey.substring(0, this.groupIdLength);\n    const key = orderKey.substring(this.groupIdLength);\n    return [groupId, key];\n  }\n  /**\n   * check if two keys are in the same group\n   * if not using groups, keys will always be in the same group\n   */\n  isSameGroup(a, b) {\n    if (!this.useGroups)\n      return true;\n    const [aGroupId] = this.splitIntoGroupIdAndOrderKey(a);\n    const [bGroupId] = this.splitIntoGroupIdAndOrderKey(b);\n    return aGroupId === bGroupId;\n  }\n  /**\n   * check if the key is part of the group\n   * if not using groups, key will always be part of the group\n   */\n  isPartOfGroup(orderKey, groupId) {\n    if (!this.useGroups)\n      return true;\n    const [keyGroupId] = this.splitIntoGroupIdAndOrderKey(orderKey);\n    return keyGroupId === groupId;\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fractional-indexing-jittered/lib/index.js\n");

/***/ })

};
;